// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: src/LexerColor.flex

import compilerTools.TextColor;
import java.awt.Color;


// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
class LexerColor {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\37\u0100\1\u0200\267\u0100\10\u0300\u1020\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\3\1\1\1\4\22\0\1\5"+
    "\3\0\1\6\2\0\1\7\2\10\1\11\3\10\1\0"+
    "\1\12\1\13\11\14\1\0\1\15\1\16\1\17\1\16"+
    "\2\0\1\20\1\21\1\22\1\23\10\21\1\24\15\21"+
    "\1\25\1\0\1\26\1\0\1\21\1\0\1\27\1\30"+
    "\1\31\1\32\1\33\1\34\1\35\1\36\1\37\2\21"+
    "\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1\47"+
    "\1\50\1\51\1\52\1\53\2\21\1\54\1\10\1\0"+
    "\1\55\7\0\1\3\73\0\1\21\7\0\1\21\3\0"+
    "\1\21\3\0\1\21\1\0\1\21\6\0\1\21\1\0"+
    "\1\21\4\0\1\21\7\0\1\21\3\0\1\21\3\0"+
    "\1\56\1\0\1\21\6\0\1\21\1\0\1\21\u012b\0"+
    "\2\3\326\0\u0100\3";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1024];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\2\2\1\3\1\1\3\4\17\5\1\4"+
    "\2\0\1\6\1\0\7\5\1\4\20\5\1\7\2\0"+
    "\2\6\1\0\1\10\7\5\1\10\24\5\1\0\1\6"+
    "\5\5\1\11\15\5\1\12\31\5\1\13\3\5\1\13"+
    "\24\5\1\14\50\5";

  private static int [] zzUnpackAction() {
    int [] result = new int[201];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\57\0\57\0\136\0\215\0\274\0\57\0\353"+
    "\0\u011a\0\u0149\0\u0178\0\u01a7\0\u01d6\0\u0205\0\u0234\0\u0263"+
    "\0\u0292\0\u02c1\0\u02f0\0\u031f\0\u034e\0\u037d\0\u03ac\0\u03db"+
    "\0\u040a\0\u0439\0\u0468\0\u0497\0\u04c6\0\u04f5\0\u0524\0\u0553"+
    "\0\u0582\0\u05b1\0\u05e0\0\u060f\0\u0149\0\u063e\0\u066d\0\u069c"+
    "\0\u06cb\0\u06fa\0\u0729\0\u0758\0\u0787\0\u07b6\0\u07e5\0\u0814"+
    "\0\u0843\0\u0872\0\u08a1\0\u08d0\0\u08ff\0\57\0\u092e\0\u095d"+
    "\0\57\0\u098c\0\u09bb\0\57\0\u09ea\0\u0a19\0\u0a48\0\u0a77"+
    "\0\u0aa6\0\u0ad5\0\u0b04\0\u0149\0\u0b33\0\u0b62\0\u0b91\0\u0bc0"+
    "\0\u0bef\0\u0c1e\0\u0c4d\0\u0c7c\0\u0cab\0\u0cda\0\u0d09\0\u0d38"+
    "\0\u0d67\0\u0d96\0\u0dc5\0\u0df4\0\u0e23\0\u0e52\0\u0e81\0\u0eb0"+
    "\0\u0edf\0\u092e\0\u0f0e\0\u0f3d\0\u0f6c\0\u0f9b\0\u0fca\0\u0149"+
    "\0\u0ff9\0\u1028\0\u1057\0\u1086\0\u10b5\0\u10e4\0\u1113\0\u1142"+
    "\0\u1171\0\u11a0\0\u11cf\0\u11fe\0\u122d\0\u0149\0\u125c\0\u128b"+
    "\0\u12ba\0\u12e9\0\u1318\0\u1347\0\u1376\0\u13a5\0\u13d4\0\u1403"+
    "\0\u1432\0\u1461\0\u1490\0\u14bf\0\u14ee\0\u151d\0\u154c\0\u157b"+
    "\0\u15aa\0\u15d9\0\u1608\0\u1637\0\u1666\0\u1695\0\u16c4\0\u16f3"+
    "\0\u1722\0\u1751\0\u1780\0\u0149\0\u17af\0\u17de\0\u180d\0\u183c"+
    "\0\u186b\0\u189a\0\u18c9\0\u18f8\0\u1927\0\u1956\0\u1985\0\u19b4"+
    "\0\u19e3\0\u1a12\0\u1a41\0\u1a70\0\u1a9f\0\u1ace\0\u1afd\0\u1b2c"+
    "\0\u0149\0\u1b5b\0\u1b8a\0\u1bb9\0\u1be8\0\u1c17\0\u1c46\0\u1c75"+
    "\0\u1ca4\0\u1cd3\0\u1d02\0\u1d31\0\u1d60\0\u1d8f\0\u1dbe\0\u1ded"+
    "\0\u1e1c\0\u1e4b\0\u1e7a\0\u1ea9\0\u1ed8\0\u1f07\0\u1f36\0\u1f65"+
    "\0\u1f94\0\u1fc3\0\u1ff2\0\u2021\0\u2050\0\u207f\0\u20ae\0\u20dd"+
    "\0\u210c\0\u213b\0\u216a\0\u2199\0\u21c8\0\u21f7\0\u2226\0\u2255"+
    "\0\u2284";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[201];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\0\1\4\1\3\1\5\1\6\2\7"+
    "\1\10\1\2\1\5\1\7\1\11\1\7\5\12\2\2"+
    "\1\12\1\13\1\12\1\14\1\15\1\16\1\12\1\17"+
    "\1\20\1\12\1\21\1\22\1\12\1\23\1\12\1\24"+
    "\1\25\1\26\1\12\1\27\1\30\1\12\1\31\1\12"+
    "\61\0\1\3\67\0\2\5\62\0\5\32\2\0\26\32"+
    "\1\0\1\32\11\0\1\33\1\34\63\0\1\7\52\0"+
    "\2\12\3\0\5\12\1\35\1\0\26\12\1\0\1\12"+
    "\13\0\2\12\3\0\5\12\1\35\1\0\14\12\1\36"+
    "\11\12\1\0\1\12\13\0\2\12\3\0\5\12\1\35"+
    "\1\0\4\12\1\37\21\12\1\0\1\12\13\0\2\12"+
    "\3\0\5\12\1\35\1\0\20\12\1\40\5\12\1\0"+
    "\1\12\13\0\2\12\3\0\5\12\1\35\1\0\1\41"+
    "\10\12\1\42\2\12\1\43\11\12\1\0\1\12\13\0"+
    "\2\12\3\0\5\12\1\35\1\0\14\12\1\44\11\12"+
    "\1\0\1\12\13\0\2\12\3\0\5\12\1\35\1\0"+
    "\5\12\1\45\3\12\1\46\1\12\1\47\12\12\1\0"+
    "\1\12\13\0\2\12\3\0\5\12\1\35\1\0\1\50"+
    "\25\12\1\0\1\12\13\0\2\12\3\0\5\12\1\35"+
    "\1\0\14\12\1\51\5\12\1\52\3\12\1\0\1\12"+
    "\13\0\2\12\3\0\5\12\1\35\1\0\4\12\1\53"+
    "\12\12\1\54\6\12\1\0\1\12\13\0\2\12\3\0"+
    "\5\12\1\35\1\0\4\12\1\55\7\12\1\56\11\12"+
    "\1\0\1\12\13\0\2\12\3\0\5\12\1\35\1\0"+
    "\14\12\1\57\4\12\1\60\4\12\1\0\1\12\13\0"+
    "\2\12\3\0\5\12\1\35\1\0\1\61\7\12\1\62"+
    "\6\12\1\63\6\12\1\0\1\12\13\0\2\12\3\0"+
    "\5\12\1\35\1\0\1\43\3\12\1\64\21\12\1\0"+
    "\1\12\13\0\2\12\3\0\5\12\1\35\1\0\7\12"+
    "\1\65\16\12\1\0\1\12\15\0\1\7\46\0\1\32"+
    "\1\0\1\66\3\0\2\32\3\0\5\32\2\0\26\32"+
    "\1\0\1\32\11\67\1\70\45\67\2\34\1\71\1\34"+
    "\1\72\52\34\20\0\5\73\1\0\1\74\26\73\1\0"+
    "\1\73\13\0\2\12\3\0\5\12\1\35\1\0\14\12"+
    "\1\75\11\12\1\0\1\12\13\0\2\12\3\0\5\12"+
    "\1\35\1\0\2\12\1\76\23\12\1\0\1\12\13\0"+
    "\2\12\3\0\5\12\1\35\1\0\21\12\1\77\4\12"+
    "\1\0\1\12\13\0\2\12\3\0\5\12\1\35\1\0"+
    "\11\12\1\100\14\12\1\0\1\12\13\0\2\12\3\0"+
    "\5\12\1\35\1\0\14\12\1\101\11\12\1\0\1\12"+
    "\13\0\2\12\3\0\5\12\1\35\1\0\17\12\1\45"+
    "\6\12\1\0\1\12\13\0\2\12\3\0\5\12\1\35"+
    "\1\0\17\12\1\102\6\12\1\0\1\12\13\0\2\12"+
    "\3\0\5\12\1\35\1\0\22\12\1\103\3\12\1\0"+
    "\1\12\13\0\2\12\3\0\5\12\1\35\1\0\21\12"+
    "\1\104\4\12\1\0\1\12\13\0\2\12\3\0\5\12"+
    "\1\35\1\0\10\12\1\105\15\12\1\0\1\106\13\0"+
    "\2\12\3\0\5\12\1\35\1\0\2\12\1\107\23\12"+
    "\1\0\1\12\13\0\2\12\3\0\5\12\1\35\1\0"+
    "\12\12\1\110\13\12\1\0\1\12\13\0\2\12\3\0"+
    "\5\12\1\35\1\0\3\12\1\111\14\12\1\112\5\12"+
    "\1\0\1\12\13\0\2\12\3\0\5\12\1\35\1\0"+
    "\4\12\1\113\3\12\1\114\15\12\1\0\1\12\13\0"+
    "\2\12\3\0\5\12\1\35\1\0\1\115\5\12\1\116"+
    "\17\12\1\0\1\12\13\0\2\12\3\0\5\12\1\35"+
    "\1\0\21\12\1\117\4\12\1\0\1\12\13\0\2\12"+
    "\3\0\5\12\1\35\1\0\11\12\1\120\14\12\1\0"+
    "\1\12\13\0\2\12\3\0\5\12\1\35\1\0\17\12"+
    "\1\121\6\12\1\0\1\12\13\0\2\12\3\0\5\12"+
    "\1\35\1\0\17\12\1\122\6\12\1\0\1\12\13\0"+
    "\2\12\3\0\5\12\1\35\1\0\4\12\1\123\10\12"+
    "\1\124\10\12\1\0\1\12\13\0\2\12\3\0\5\12"+
    "\1\35\1\0\22\12\1\125\3\12\1\0\1\12\13\0"+
    "\2\12\3\0\5\12\1\35\1\0\6\12\1\126\10\12"+
    "\1\127\6\12\1\0\1\12\13\0\2\12\3\0\5\12"+
    "\1\35\1\0\10\12\1\130\15\12\1\0\1\12\11\67"+
    "\1\131\56\67\1\131\1\132\44\67\2\0\1\71\67\0"+
    "\2\73\3\0\5\73\1\0\1\74\26\73\1\0\1\73"+
    "\13\0\2\12\3\0\5\12\1\35\1\0\11\12\1\133"+
    "\14\12\1\0\1\12\13\0\2\12\3\0\5\12\1\35"+
    "\1\0\11\12\1\134\14\12\1\0\1\12\13\0\2\12"+
    "\3\0\5\12\1\35\1\0\1\135\25\12\1\0\1\12"+
    "\13\0\2\12\3\0\5\12\1\35\1\0\20\12\1\125"+
    "\5\12\1\0\1\12\13\0\2\12\3\0\5\12\1\35"+
    "\1\0\1\47\25\12\1\0\1\12\13\0\2\12\3\0"+
    "\5\12\1\35\1\0\1\136\25\12\1\0\1\12\13\0"+
    "\2\12\3\0\5\12\1\35\1\0\12\12\1\137\13\12"+
    "\1\0\1\12\13\0\2\12\3\0\5\12\1\35\1\0"+
    "\13\12\1\140\12\12\1\0\1\12\13\0\2\12\3\0"+
    "\5\12\1\35\1\0\1\141\25\12\1\0\1\12\13\0"+
    "\2\12\3\0\5\12\1\35\1\0\7\12\1\125\16\12"+
    "\1\0\1\12\13\0\2\12\3\0\5\12\1\35\1\0"+
    "\4\12\1\142\21\12\1\0\1\12\13\0\2\12\3\0"+
    "\5\12\1\35\1\0\10\12\1\143\15\12\1\0\1\12"+
    "\13\0\2\12\3\0\5\12\1\35\1\0\16\12\1\144"+
    "\7\12\1\0\1\12\13\0\2\12\3\0\5\12\1\35"+
    "\1\0\15\12\1\145\10\12\1\0\1\12\13\0\2\12"+
    "\3\0\5\12\1\35\1\0\13\12\1\146\12\12\1\0"+
    "\1\12\13\0\2\12\3\0\5\12\1\35\1\0\11\12"+
    "\1\147\14\12\1\0\1\12\13\0\2\12\3\0\5\12"+
    "\1\35\1\0\22\12\1\150\3\12\1\0\1\12\13\0"+
    "\2\12\3\0\5\12\1\35\1\0\1\151\25\12\1\0"+
    "\1\12\13\0\2\12\3\0\5\12\1\35\1\0\10\12"+
    "\1\152\15\12\1\0\1\12\13\0\2\12\3\0\5\12"+
    "\1\35\1\0\10\12\1\153\15\12\1\0\1\12\13\0"+
    "\2\12\3\0\5\12\1\35\1\0\3\12\1\125\22\12"+
    "\1\0\1\12\13\0\2\12\3\0\5\12\1\35\1\0"+
    "\12\12\1\154\13\12\1\0\1\12\13\0\2\12\3\0"+
    "\5\12\1\35\1\0\14\12\1\155\11\12\1\0\1\12"+
    "\13\0\2\12\3\0\5\12\1\35\1\0\4\12\1\156"+
    "\21\12\1\0\1\12\13\0\2\12\3\0\5\12\1\35"+
    "\1\0\4\12\1\157\21\12\1\0\1\12\13\0\2\12"+
    "\3\0\5\12\1\35\1\0\12\12\1\160\1\12\1\161"+
    "\11\12\1\0\1\12\13\0\2\12\3\0\5\12\1\35"+
    "\1\0\11\12\1\162\14\12\1\0\1\12\11\67\1\131"+
    "\1\71\44\67\13\0\2\12\3\0\5\12\1\35\1\0"+
    "\4\12\1\163\21\12\1\0\1\12\13\0\2\12\3\0"+
    "\5\12\1\35\1\0\1\164\25\12\1\0\1\12\13\0"+
    "\2\12\3\0\5\12\1\35\1\0\3\12\1\165\22\12"+
    "\1\0\1\12\13\0\2\12\3\0\3\12\1\166\1\12"+
    "\1\35\1\0\26\12\1\0\1\12\13\0\2\12\3\0"+
    "\5\12\1\35\1\0\10\12\1\167\15\12\1\0\1\12"+
    "\13\0\2\12\3\0\5\12\1\35\1\0\13\12\1\170"+
    "\12\12\1\0\1\12\13\0\2\12\3\0\5\12\1\35"+
    "\1\0\17\12\1\171\6\12\1\0\1\12\13\0\2\12"+
    "\3\0\5\12\1\35\1\0\3\12\1\172\22\12\1\0"+
    "\1\12\13\0\2\12\3\0\5\12\1\35\1\0\22\12"+
    "\1\173\3\12\1\0\1\12\13\0\2\12\3\0\5\12"+
    "\1\35\1\0\1\174\25\12\1\0\1\12\13\0\2\12"+
    "\3\0\5\12\1\35\1\0\21\12\1\45\4\12\1\0"+
    "\1\12\13\0\2\12\3\0\5\12\1\35\1\0\10\12"+
    "\1\175\15\12\1\0\1\12\13\0\2\12\3\0\5\12"+
    "\1\35\1\0\11\12\1\176\14\12\1\0\1\12\13\0"+
    "\2\12\3\0\5\12\1\35\1\0\17\12\1\177\6\12"+
    "\1\0\1\12\13\0\2\12\3\0\5\12\1\35\1\0"+
    "\2\12\1\200\23\12\1\0\1\12\13\0\2\12\3\0"+
    "\5\12\1\35\1\0\13\12\1\201\12\12\1\0\1\12"+
    "\13\0\2\12\3\0\5\12\1\35\1\0\15\12\1\202"+
    "\10\12\1\0\1\12\13\0\2\12\3\0\2\12\1\203"+
    "\2\12\1\35\1\0\26\12\1\0\1\12\13\0\2\12"+
    "\3\0\5\12\1\35\1\0\21\12\1\204\4\12\1\0"+
    "\1\12\13\0\2\12\3\0\5\12\1\35\1\0\4\12"+
    "\1\205\21\12\1\0\1\12\13\0\2\12\3\0\5\12"+
    "\1\35\1\0\5\12\1\206\20\12\1\0\1\12\13\0"+
    "\2\12\3\0\5\12\1\35\1\0\4\12\1\45\21\12"+
    "\1\0\1\12\13\0\2\12\3\0\5\12\1\35\1\0"+
    "\1\207\25\12\1\0\1\12\13\0\2\12\3\0\5\12"+
    "\1\35\1\0\17\12\1\117\6\12\1\0\1\12\13\0"+
    "\2\12\3\0\5\12\1\35\1\0\14\12\1\210\11\12"+
    "\1\0\1\12\13\0\2\12\3\0\5\12\1\35\1\0"+
    "\4\12\1\211\21\12\1\0\1\12\13\0\2\12\3\0"+
    "\5\12\1\35\1\0\13\12\1\212\12\12\1\0\1\12"+
    "\13\0\2\12\3\0\5\12\1\35\1\0\1\156\25\12"+
    "\1\0\1\12\13\0\2\12\3\0\5\12\1\35\1\0"+
    "\14\12\1\213\11\12\1\0\1\12\13\0\2\12\3\0"+
    "\5\12\1\35\1\0\14\12\1\214\11\12\1\0\1\12"+
    "\13\0\2\12\3\0\5\12\1\35\1\0\4\12\1\215"+
    "\21\12\1\0\1\12\13\0\2\12\3\0\5\12\1\35"+
    "\1\0\17\12\1\216\6\12\1\0\1\12\13\0\2\12"+
    "\3\0\5\12\1\35\1\0\25\12\1\217\1\0\1\12"+
    "\13\0\2\12\3\0\5\12\1\35\1\0\1\220\25\12"+
    "\1\0\1\12\13\0\2\12\3\0\5\12\1\35\1\0"+
    "\12\12\1\221\13\12\1\0\1\12\13\0\2\12\3\0"+
    "\5\12\1\35\1\0\10\12\1\222\15\12\1\0\1\12"+
    "\13\0\2\12\3\0\5\12\1\35\1\0\6\12\1\104"+
    "\17\12\1\0\1\12\13\0\2\12\3\0\5\12\1\35"+
    "\1\0\14\12\1\223\11\12\1\0\1\12\13\0\2\12"+
    "\3\0\5\12\1\35\1\0\14\12\1\224\11\12\1\0"+
    "\1\12\13\0\2\12\3\0\5\12\1\35\1\0\1\225"+
    "\25\12\1\0\1\12\13\0\2\12\3\0\5\12\1\35"+
    "\1\0\13\12\1\226\4\12\1\227\5\12\1\0\1\12"+
    "\13\0\2\12\3\0\5\12\1\35\1\0\4\12\1\230"+
    "\21\12\1\0\1\12\13\0\2\12\3\0\5\12\1\35"+
    "\1\0\13\12\1\104\12\12\1\0\1\12\13\0\2\12"+
    "\3\0\5\12\1\35\1\0\12\12\1\231\13\12\1\0"+
    "\1\12\13\0\2\12\3\0\5\12\1\35\1\0\11\12"+
    "\1\232\14\12\1\0\1\12\13\0\2\12\3\0\5\12"+
    "\1\35\1\0\1\233\25\12\1\0\1\12\13\0\2\12"+
    "\3\0\1\234\3\12\1\235\1\35\1\0\26\12\1\0"+
    "\1\12\13\0\2\12\3\0\5\12\1\35\1\0\21\12"+
    "\1\236\4\12\1\0\1\12\13\0\2\12\3\0\5\12"+
    "\1\35\1\0\1\237\25\12\1\0\1\12\13\0\2\12"+
    "\3\0\5\12\1\35\1\0\1\240\25\12\1\0\1\12"+
    "\13\0\2\12\3\0\5\12\1\35\1\0\17\12\1\241"+
    "\6\12\1\0\1\12\13\0\2\12\3\0\5\12\1\35"+
    "\1\0\4\12\1\242\21\12\1\0\1\12\13\0\2\12"+
    "\3\0\5\12\1\35\1\0\21\12\1\243\4\12\1\0"+
    "\1\12\13\0\2\12\3\0\5\12\1\35\1\0\15\12"+
    "\1\244\10\12\1\0\1\12\13\0\2\12\3\0\5\12"+
    "\1\35\1\0\12\12\1\245\13\12\1\0\1\12\13\0"+
    "\2\12\3\0\5\12\1\35\1\0\17\12\1\246\6\12"+
    "\1\0\1\12\13\0\2\12\3\0\5\12\1\35\1\0"+
    "\22\12\1\45\3\12\1\0\1\12\13\0\2\12\3\0"+
    "\5\12\1\35\1\0\1\45\25\12\1\0\1\12\13\0"+
    "\2\12\3\0\5\12\1\35\1\0\17\12\1\247\6\12"+
    "\1\0\1\12\13\0\2\12\3\0\5\12\1\35\1\0"+
    "\4\12\1\250\21\12\1\0\1\12\13\0\2\12\3\0"+
    "\3\12\1\251\1\12\1\35\1\0\26\12\1\0\1\12"+
    "\13\0\2\12\3\0\5\12\1\35\1\0\17\12\1\252"+
    "\6\12\1\0\1\12\13\0\2\12\3\0\5\12\1\35"+
    "\1\0\20\12\1\253\5\12\1\0\1\12\13\0\2\12"+
    "\3\0\5\12\1\35\1\0\4\12\1\254\21\12\1\0"+
    "\1\12\13\0\2\12\3\0\5\12\1\35\1\0\4\12"+
    "\1\225\21\12\1\0\1\12\13\0\2\12\3\0\5\12"+
    "\1\35\1\0\17\12\1\255\6\12\1\0\1\12\13\0"+
    "\2\12\3\0\5\12\1\35\1\0\17\12\1\223\6\12"+
    "\1\0\1\12\13\0\2\12\3\0\5\12\1\35\1\0"+
    "\13\12\1\226\12\12\1\0\1\12\13\0\2\12\3\0"+
    "\5\12\1\35\1\0\1\256\25\12\1\0\1\12\13\0"+
    "\2\12\3\0\5\12\1\35\1\0\4\12\1\257\21\12"+
    "\1\0\1\12\13\0\2\12\3\0\5\12\1\35\1\0"+
    "\10\12\1\260\15\12\1\0\1\12\13\0\2\12\3\0"+
    "\5\12\1\35\1\0\10\12\1\261\15\12\1\0\1\12"+
    "\13\0\2\12\3\0\5\12\1\35\1\0\21\12\1\262"+
    "\4\12\1\0\1\12\13\0\2\12\3\0\5\12\1\35"+
    "\1\0\20\12\1\262\5\12\1\0\1\12\13\0\2\12"+
    "\3\0\5\12\1\35\1\0\10\12\1\263\15\12\1\0"+
    "\1\12\13\0\2\12\3\0\5\12\1\35\1\0\2\12"+
    "\1\264\23\12\1\0\1\12\13\0\2\12\3\0\5\12"+
    "\1\35\1\0\10\12\1\265\15\12\1\0\1\12\13\0"+
    "\2\12\3\0\5\12\1\35\1\0\20\12\1\263\5\12"+
    "\1\0\1\12\13\0\2\12\3\0\5\12\1\35\1\0"+
    "\12\12\1\266\13\12\1\0\1\12\13\0\2\12\3\0"+
    "\5\12\1\35\1\0\17\12\1\267\6\12\1\0\1\12"+
    "\13\0\2\12\3\0\5\12\1\35\1\0\3\12\1\270"+
    "\22\12\1\0\1\12\13\0\2\12\3\0\5\12\1\35"+
    "\1\0\3\12\1\263\22\12\1\0\1\12\13\0\2\12"+
    "\3\0\5\12\1\35\1\0\1\271\25\12\1\0\1\12"+
    "\13\0\2\12\3\0\5\12\1\35\1\0\1\272\25\12"+
    "\1\0\1\12\13\0\2\12\3\0\5\12\1\35\1\0"+
    "\1\214\25\12\1\0\1\12\13\0\2\12\3\0\5\12"+
    "\1\35\1\0\1\273\25\12\1\0\1\12\13\0\2\12"+
    "\3\0\5\12\1\35\1\0\4\12\1\274\21\12\1\0"+
    "\1\12\13\0\2\12\3\0\5\12\1\35\1\0\4\12"+
    "\1\275\21\12\1\0\1\12\13\0\2\12\3\0\5\12"+
    "\1\35\1\0\12\12\1\276\13\12\1\0\1\12\13\0"+
    "\2\12\3\0\5\12\1\35\1\0\10\12\1\277\15\12"+
    "\1\0\1\12\13\0\2\12\3\0\5\12\1\35\1\0"+
    "\13\12\1\300\12\12\1\0\1\12\13\0\2\12\3\0"+
    "\5\12\1\35\1\0\20\12\1\45\5\12\1\0\1\12"+
    "\13\0\2\12\3\0\5\12\1\35\1\0\12\12\1\301"+
    "\13\12\1\0\1\12\13\0\2\12\3\0\5\12\1\35"+
    "\1\0\13\12\1\302\12\12\1\0\1\12\13\0\2\12"+
    "\3\0\5\12\1\35\1\0\20\12\1\227\5\12\1\0"+
    "\1\12\13\0\2\12\3\0\5\12\1\35\1\0\4\12"+
    "\1\303\21\12\1\0\1\12\13\0\2\12\3\0\5\12"+
    "\1\35\1\0\3\12\1\304\22\12\1\0\1\12\13\0"+
    "\2\12\3\0\5\12\1\35\1\0\14\12\1\241\11\12"+
    "\1\0\1\12\13\0\2\12\3\0\5\12\1\35\1\0"+
    "\10\12\1\305\15\12\1\0\1\12\13\0\2\12\3\0"+
    "\5\12\1\35\1\0\21\12\1\306\4\12\1\0\1\12"+
    "\13\0\2\12\3\0\5\12\1\35\1\0\20\12\1\307"+
    "\5\12\1\0\1\12\13\0\2\12\3\0\5\12\1\35"+
    "\1\0\14\12\1\45\11\12\1\0\1\12\13\0\2\12"+
    "\3\0\5\12\1\35\1\0\13\12\1\304\12\12\1\0"+
    "\1\12\13\0\2\12\3\0\5\12\1\35\1\0\14\12"+
    "\1\310\11\12\1\0\1\12\13\0\2\12\3\0\5\12"+
    "\1\35\1\0\4\12\1\311\21\12\1\0\1\12\13\0"+
    "\2\12\3\0\5\12\1\35\1\0\20\12\1\214\5\12"+
    "\1\0\1\12\13\0\2\12\3\0\5\12\1\35\1\0"+
    "\17\12\1\304\6\12\1\0\1\12";

  private static int [] zzUnpackTrans() {
    int [] result = new int[8883];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\2\11\3\1\1\11\22\1\2\0\1\1\1\0"+
    "\30\1\1\11\2\0\1\11\1\1\1\0\1\11\34\1"+
    "\1\0\160\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[201];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
    private TextColor textColor(long start, int size, Color color){
        return new TextColor((int) start, size, color);
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  LexerColor(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  public TextColor yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return textColor(yychar, yylength(), new Color(255, 0, 0));
            }
            // fall through
          case 13: break;
          case 2:
            { /*Ignorar*/
            }
            // fall through
          case 14: break;
          case 3:
            { return textColor(yychar, yylength(), new Color(57, 130, 130));
            }
            // fall through
          case 15: break;
          case 4:
            { return textColor(yychar, yylength(), new Color(0, 0, 0));
            }
            // fall through
          case 16: break;
          case 5:
            { return textColor(yychar, yylength(), new Color(0, 143, 57));
            }
            // fall through
          case 17: break;
          case 6:
            { return textColor(yychar, yylength(), new Color(146, 146, 146));
            }
            // fall through
          case 18: break;
          case 7:
            { return textColor(yychar, yylength(), new Color(255, 128, 0));
            }
            // fall through
          case 19: break;
          case 8:
            { return textColor(yychar, yylength(), new Color(0, 0, 255));
            }
            // fall through
          case 20: break;
          case 9:
            { return textColor(yychar, yylength(), new Color(153, 0, 76));
            }
            // fall through
          case 21: break;
          case 10:
            { return textColor(yychar, yylength(), new Color(35, 65, 185));
            }
            // fall through
          case 22: break;
          case 11:
            { return textColor(yychar, yylength(), new Color(110, 32, 189));
            }
            // fall through
          case 23: break;
          case 12:
            { return textColor(yychar, yylength(), new Color(74, 185, 35));
            }
            // fall through
          case 24: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
